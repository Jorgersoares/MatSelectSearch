{"version":3,"file":"mat-select-search.umd.js","sources":["../../../projects/mat-select-search/src/lib/searcher.service.ts","../../../projects/mat-select-search/src/lib/mat-select-search.component.ts","../../../projects/mat-select-search/src/lib/mat-select-search.component.html","../../../projects/mat-select-search/src/lib/mat-select-search.module.ts","../../../projects/mat-select-search/src/public-api.ts","../../../projects/mat-select-search/src/mat-select-search.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Searcher {\n  private list: Record<string, string>[] = [];\n  private searchProperty = '';\n  private searchText = '';\n  private previousSearchText = '';\n  private previousInputtype = '';\n  private filteredList: Record<string, string>[] = [];\n  private previousFilteredList: Record<string, string>[] = [];\n  private canReturnPreviousFilteredList = true;\n\n  initSearch(list: Record<string, string>[], searchProperties: string[]): void {\n    if (searchProperties.length > 1) {\n      this.list = list.map(item => (\n        {...item, concatedValues: this.concateValues(item, searchProperties)}\n      ));\n      this.searchProperty = 'concatedValues';\n    } else {\n      this.list = list;\n      this.searchProperty = searchProperties[0];\n    }\n  }\n\n  filterList(inputEvent: InputEvent): Record<string, string>[] | undefined {\n    if (inputEvent.data === ' ') { return; }\n    const searchText = (inputEvent.target as HTMLInputElement).value;\n    const removeWhitespaces = (text: string) => text.split(' ').join('');\n    const searchTextInLowerCase = removeWhitespaces(searchText).toLocaleLowerCase();\n    this.searchText = searchTextInLowerCase;\n\n    const list = this.getList();\n    this.previousSearchText = searchTextInLowerCase;\n    this.previousInputtype = inputEvent.inputType;\n    if (!list) { return this.previousFilteredList; }\n    this.filteredList = list.filter(item =>\n      removeWhitespaces(item[this.searchProperty]).toLowerCase().includes(this.searchText));\n    return this.filteredList;\n  }\n\n  private concateValues(item: Record<string, string>, searchProperties: string[]): string {\n    let concatedValues = '';\n    searchProperties.forEach(property => concatedValues += item[property]);\n    return concatedValues;\n  }\n\n  private getList(): Record<string, string>[] | undefined {\n    if (this.previousSearchText && this.searchText.includes(this.previousSearchText)) {\n      if (this.canReturnPreviousFilteredList) { this.previousFilteredList = this.filteredList; }\n      this.canReturnPreviousFilteredList = true;\n      return this.filteredList;\n    }\n\n    const isLastTextFromPaste = this.previousInputtype === 'insertFromPaste';\n    const canReturnPreviousFilteredList = this.isBackSpacedLastChar() &&\n     !isLastTextFromPaste && this.canReturnPreviousFilteredList;\n\n    if (canReturnPreviousFilteredList) {\n      this.canReturnPreviousFilteredList = false;\n      return;\n    }\n    return this.list;\n  }\n\n  private isBackSpacedLastChar(): boolean {\n    const isTextDecrementedBy1 = this.previousSearchText.length - this.searchText.length === 1;\n    const lastChar = this.previousSearchText.charAt(this.previousSearchText.length - 1);\n    const concatedText = this.searchText + lastChar;\n    return isTextDecrementedBy1 && concatedText === this.previousSearchText;\n  }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { MatSelect } from '@angular/material/select';\nimport { Subscription } from 'rxjs';\nimport { Searcher } from './searcher.service';\n\n@Component({\n  selector: 'lib-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: [ './mat-select-search.scss' ]\n})\nexport class MatSelectSearchComponent implements AfterViewInit, OnDestroy {\n  @Input() list: Record<string, string>[] = [];\n  @Input() searchProperties: string[] = [];\n  @Input() clearSearchInput = false;\n  @Output() filtered = new EventEmitter<Record<string, string>[]>();\n  @ViewChild('input', { read: ElementRef, static: true }) element!: ElementRef;\n  isLoading = false;\n  private filteredList: Record<string, string>[] | undefined = [];\n  private fullList: Record<string, string>[] = [];\n  private hasFilteredBefore = false;\n  private subscriptions = new Subscription();\n\n  constructor(\n    @Inject(MatSelect) private matSelect: MatSelect,\n      private searcher: Searcher\n    ) { }\n\n  ngAfterViewInit(): void {\n    this.fullList = this.list;\n    this.searcher.initSearch(this.list, this.searchProperties);\n    this.subscriptions\n      .add(this.matSelect.openedChange\n      .subscribe(() => {\n        const input = document.getElementById('input') as HTMLInputElement;\n        input.focus();\n        if ((this.filteredList && this.filteredList.length === 0 && this.hasFilteredBefore) || this.clearSearchInput) {\n          input.value = '';\n          this.filtered.emit(this.fullList);\n        }\n      })\n      .add(this.filtered.subscribe(() => this.isLoading = false))\n    );\n  }\n\n  filterList(event: Event): void {\n    const inputEvent = event as InputEvent;\n    this.hasFilteredBefore = true;\n    this.isLoading = true;\n    this.filteredList = this.searcher.filterList(inputEvent);\n\n    if (!this.filteredList) {\n      this.isLoading = false;\n      return;\n    }\n\n    const listWithoutConcatedValues = this.filteredList.map(item => {\n      const itemCopy = {...item};\n      delete itemCopy['concatedValues'];\n      return itemCopy;\n    });\n    this.filtered.emit(listWithoutConcatedValues);\n  }\n\n  ngOnDestroy(): void { this.subscriptions.unsubscribe(); }\n}\n","<div class=\"flex-container\">\n  <input\n    #input\n    id=\"input\"\n    placeholder=\"Search\"\n    (input)=\"filterList($event)\"\n    (keydown)=\"$event.stopPropagation()\">\n    <div class=\"spinner\">\n      <mat-spinner *ngIf=\"isLoading\" [diameter]=\"25\"></mat-spinner>\n    </div>\n</div>\n<mat-divider></mat-divider>\n","import { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatDividerModule} from '@angular/material/divider';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    MatSelectSearchComponent\n  ],\n  imports: [\n    MatProgressSpinnerModule,\n    MatDividerModule,\n    CommonModule\n  ],\n  exports: [\n    MatSelectSearchComponent\n  ]\n})\nexport class MatSelectSearchModule { }\n","/*\n * Public API Surface of mat-select-search\n */\n\nexport * from './lib/searcher.service';\nexport * from './lib/mat-select-search.component';\nexport * from './lib/mat-select-search.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Injectable","EventEmitter","Subscription","MatSelect","ElementRef","Component","Inject","Input","Output","ViewChild","MatProgressSpinnerModule","MatDividerModule","CommonModule","NgModule"],"mappings":"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"}